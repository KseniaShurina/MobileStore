@using MobileStore.Core.Abstractions.Services
@using MobileStore.Core.Models
@using MobileStore.Presentation.Blazor.Components.Business.Product
@using MobileStore.Presentation.Blazor.Components.Standard.Grid
@using MobileStore.Presentation.Blazor.Components.Standard.NoData
@using MobileStore.Presentation.Blazor.Extensions

@inject IProductService ProductService
@inject NavigationManager NavigationManager


@page "/"

<PageTitle>Index</PageTitle>

<div>
    <XStProductMenu ValueChanged="OnProductChanged"></XStProductMenu>

    <XStGrid>
        @foreach (var productModel in _models)
        {
            <XStItem xs="12" sm="6" md="4" lg="3">
                <XStProductCard Model="productModel"></XStProductCard>
            </XStItem>
        }
        @if (!_isLoading && !_models.Any())
        {
            <XStNoData></XStNoData>
        }
    </XStGrid>
</div>



@code
{

    private Guid? _productTypeId;
    //
    private bool _isLoading = true;
    private List<ProductModel> _models = new();

    /// <summary>
    /// For retrieves the value "productTypeId" from current query string
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Guid.TryParse(NavigationManager.QueryString("productTypeId"), out var productTypeId))
        {
            // If parsing of the query string parameter as a GUID is successful,
            // assign the parsed GUID value to the _productTypeId variable
            _productTypeId = productTypeId;
        }

        await Reload();
    }

    private async Task OnProductChanged(Guid? value)
    {
        _productTypeId = value;

        await Reload();
    }

    private async Task Reload()
    {
        try
        {
            _isLoading = true;
            _models.Clear();
            _models = await ProductService.GetProducts(_productTypeId);

            var queryParams = new Dictionary<string, object?>
            {
                { "productTypeId", _productTypeId?.ToString() },
            };

            // Get current
            var newUri = NavigationManager.GetUriWithQueryParameters(queryParams);

            if (NavigationManager.Uri != newUri)
            {
                NavigationManager.NavigateTo(newUri, forceLoad: false);
            }
        }
        finally
        {
            _isLoading = false;
        }
    }
}
