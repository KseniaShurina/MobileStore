@using MobileStore.Presentation.Blazor.Components.Business.Product
@using MobileStore.Presentation.Blazor.Components.Standard.Card
@using MobileStore.Presentation.Blazor.Components.Standard.Grid
@using MobileStore.Presentation.Blazor.Components.Standard.Table
@using MobileStore.Core.Models
@using MobileStore.Core.Abstractions.Services

@inject IOrderService OrderService


@page "/Orders"

<div class="xst-orders-table-container">
    <XStGrid>
        <XStItem xs="12" sm="12" md="12">
            <XStCard>
                <Content>
                    <XStTable Items="@_models.Take(3)" T="OrderModel">
                        <HeaderContent>
                            <XStTh>Number</XStTh>
                            <XStTh>Date</XStTh>
                            <XStTh>Goods</XStTh>
                            <XStTh>Status</XStTh>
                        </HeaderContent>
                        <RowTemplate>
                            <XStTd DataLabel="Number">@context.Id</XStTd>
                            <XStTd DataLabel="Date">@context.Datetime</XStTd>
                            <XStTd DataLabel="Date">@string.Join(", ", context.Items.Select(i => i.Product.Name))</XStTd>
                            <XStTd DataLabel="Status">-</XStTd>
                        </RowTemplate>
                        </XStTable>
                    </Content>
                </XStCard>
            </XStItem>
        </XStGrid>
    </div>

    @code {
    private readonly List<OrderModel> _models = new();
    public ProductModel? Product = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetOrders();
    }

    private async Task GetOrders()
    {
        _models.Clear();
        _models.AddRange(await OrderService.GetOrders());
    }
}