@using MobileStore.Core.Abstractions.Services
@using MobileStore.Core.Models
@using MobileStore.Presentation.Blazor.Components.Business.Cart
@using MobileStore.Presentation.Blazor.Components.Standard.Button
@using MobileStore.Presentation.Blazor.Components.Standard.Grid
@using MobileStore.Presentation.Blazor.Components.Standard.Card
@using MobileStore.Presentation.Blazor.Components.Standard.Text

@inject ICartService CartService
@inject NavigationManager NavigationManager

@page "/cart"
@attribute [Authorize]

<PageTitle>Cart</PageTitle>

<div>
    <XStGrid>
        <!--CartItem-->
        <XStItem xs="12" md="8">
            <XStCard>
                <Content>
                    @foreach (var cartItemModel in _models)
                    {
                        <XStCartItem Model="cartItemModel"
                                     OnQuantityChanged="_ => OnQuantityChanged()"
                                     OnDeleted="Refresh" />
                    }
                </Content>
            </XStCard>
        </XStItem>

        <!--Checkout-->
        <XStItem xs="12" md="4">
            <XStCard>
                <Content>
                    <XStText Typo="Typo.h3">Checkout:</XStText>
                    <XStCartCheckout CartItems="_models"></XStCartCheckout>
                </Content>
            </XStCard>
        </XStItem>

        <!--Continue-->
        <XStItem xs="12">
            <XStCard>
                <Actions>
                    <XStPrimaryButton OnClick="Continue">
                        Continue
                    </XStPrimaryButton>
                </Actions>
            </XStCard>
        </XStItem>
    </XStGrid>
</div>



@code {

    private List<CartItemModel> _models = new();

    /// <summary>
    /// Override this method if you will perform an asynchronous operation and want the
    /// component to refresh when that operation is completed.
    /// </summary>
    /// <returns> Representing any asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Refresh();
    }

    private async Task Refresh()
    {
        _models = await CartService.GetCartItems();
    }

    /// <summary>
    /// To refresh reference of list
    /// </summary>
    private void OnQuantityChanged()
    {
        _models = _models.ToList();
    }

    private void Continue()
    {
        NavigationManager.NavigateTo("/Cart/CreateOrder");
    }

}
