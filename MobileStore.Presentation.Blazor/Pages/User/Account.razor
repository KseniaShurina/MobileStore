@using MobileStore.Core.Abstractions.Services
@using MobileStore.Core.Models
@using MobileStore.Presentation.Blazor.Components.Business.User
@using MobileStore.Presentation.Blazor.Components.Standard.Button
@using MobileStore.Presentation.Blazor.Components.Standard.Card
@using MobileStore.Presentation.Blazor.Components.Standard.Form
@using MobileStore.Presentation.Blazor.Components.Standard.Grid
@using MobileStore.Presentation.Blazor.Services

@inject IUserService UserService
@inject NotificationService NotificationService

@page "/User/Profile"
@attribute [Authorize]

<PageTitle>Profile</PageTitle>

<div>
    <XStGrid Justify="Justify.Center">
        <XStItem xs="12" sm="10" md="8" lg="6" xl="4" xxl="3">
            <XStCard>
                <Content>
                    @* if to avoid double rendering *@
                    @if (User != null)
                    {
                        <XStForm Model="User" @ref="_form">
                            <XStUserAddressForm User="User"
                                                Disabled="_isSaving" />
                        </XStForm>

                    }
                </Content>
                <Actions>
                    <XStPrimaryButton OnClick="UpdateCurrentUser"
                                      Disabled="_isSaving">
                        Save changes
                    </XStPrimaryButton>
                </Actions>
            </XStCard>
        </XStItem>
    </XStGrid>

</div>

@code {
    public UserModel? User { get; set; }

    private XStForm _form = null!;

    private bool _isSaving;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        User = await UserService.GetCurrentUser();
    }

    private async Task SetIsSaving(bool value)
    {
        if (_isSaving != value)
        {
            _isSaving = value;
            StateHasChanged();
            await Task.Delay(1);
        }
    }

    public async Task UpdateCurrentUser()
    {
        await _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        try
        {
            await SetIsSaving(true);
            if (User != null)
            {
                await UserService.UpdateCurrentUser(User);
                NotificationService.ShowSuccess("Saved");
            }
        }
        catch
        {
            NotificationService.ShowError("Save error");
        }
        finally
        {
            await SetIsSaving(false);
        }
    }
}
