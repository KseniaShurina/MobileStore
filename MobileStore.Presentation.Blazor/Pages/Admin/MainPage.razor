@using MobileStore.Core.Abstractions.Services
@using MobileStore.Presentation.Blazor.Components.Standard.Button
@using MobileStore.Presentation.Blazor.Services

@page "/Admin"
@attribute [Authorize]

@inject IContentService ContentService
@inject NotificationService NotificationService

<div>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="10" md="8" lg="6" xl="4" xxl="3">
            <MudCard>
                <MudFileUpload T="IBrowserFile" @bind-Files="_file">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Upload Files
                        </MudButton>
                    </ButtonTemplate>

                    <SelectedTemplate>
                        @if (_file != null)
                        {
                            <MudText>@_file.Name</MudText>
                        }
                        else
                        {
                            <MudText>No File</MudText>
                        }
                    </SelectedTemplate>
                </MudFileUpload>

                <MudCardActions>
                    <XStPrimaryButton OnClick="OnClick"
                                      Disabled="_file == null || _isUploading">
                        Save changes
                    </XStPrimaryButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</div>

@code {
    private IBrowserFile? _file;
    private bool _isUploading;


    private async Task OnClick()
    {
        if (_isUploading || _file == null) return;

        try
        {
            _isUploading = true;

            using (var memoryStream = new MemoryStream())
            {
                await _file!.OpenReadStream().CopyToAsync(memoryStream);

                await ContentService.SaveFileToDatabase(_file.ContentType, _file.Name, memoryStream, CancellationToken.None);
            }

            NotificationService.ShowSuccess("Done");
        }
        catch
        {
            NotificationService.ShowError("Error");
        }
        finally
        {
            _isUploading = false;
        }
    }
}
