@using MobileStore.Core.Abstractions.Services
@using MobileStore.Core.Models
@using MobileStore.Presentation.Blazor.Components.Standard.Button
@using MobileStore.Presentation.Blazor.Components.Standard.Card
@using MobileStore.Presentation.Blazor.Components.Standard.FileUpload
@using MobileStore.Presentation.Blazor.Components.Standard.Form
@using MobileStore.Presentation.Blazor.Components.Standard.Grid
@using MobileStore.Presentation.Blazor.Components.Standard.Progress
@using MobileStore.Presentation.Blazor.Components.Standard.Skeleton
@using MobileStore.Presentation.Blazor.Helpers
@using MobileStore.Presentation.Blazor.Services

@page "/Admin/Products/{Id:guid}"
@attribute [Authorize]

@inject IProductService ProductService
@inject IContentService ContentService
@inject NotificationService NotificationService

<PageTitle>Product Profile</PageTitle>

<div>
    <XStGrid>
        <XStItem xs="12">
            <XStCard>
                <Content>
                    <XStSkeletonWrapper IsLoading="_isLoading"
                                        Height="300px"
                                        SkeletonType="SkeletonType.Rectangle">
                        @if (_product != null)
                        {
                            <XStForm Model="_product">
                                <XStProgressCircularWrapper IsLoading="_isSaving">
                                    <XStGrid>
                                        <XStItem xs="12">
                                            @* <MudImage Scr="@Product.Contents.Take(1)" Elevation="25" />
                                        *@
                                            <XStTextField @bind-Value="@_product.Name"
                                                          For="@(() => @_product.Name)"
                                                          Immediate="true"
                                                          Required="true"
                                                          RequiredError="Name is required!"
                                                          Label="Name"
                                                          Placeholder="Name"
                                                          Disabled="_isSaving" />

                                            <XStTextField @bind-Value="@_product.Price"
                                                          For="@(() => @_product.Price)"
                                                          Immediate="true"
                                                          Required="true"
                                                          RequiredError="Price is required!"
                                                          Label="Price"
                                                          Placeholder="Price"
                                                          Disabled="_isSaving" />

                                            <XStTextField @bind-Value="@_product.Company"
                                                          For="@(() => @_product.Company)"
                                                          Immediate="true"
                                                          Required="true"
                                                          RequiredError="Company is required!"
                                                          Label="Company"
                                                          Placeholder="Company"
                                                          Disabled="_isSaving" />
                                        </XStItem>

                                        <XStItem xs="12">
                                            @foreach (var content in _product.Contents)
                                            {
                                                // TODO
                                                @* @content.Id @content.Name @content.ContentType *@
                                                <MudBadge OnClick="_ => DeleteImage(content.Id)"
                                                          Color="Color.Error" 
                                                          Icon="@Icons.Material.Filled.Remove" 
                                                          Overlap="true" 
                                                          Bordered="true"
                                                          Class="product-image-del">
                                                    <MudImage Src="@ContentHelper.GetUrl(content.ContentId)"
                                                              Height="100" 
                                                              Class="rounded-lg product-image"/>
                                                </MudBadge>
                                            }
                                        </XStItem>

                                        <!--Upload files-->
                                        <XStItem xs="12" md="4">
                                            <XStCard>
                                                <Content>
                                                    <XStFileUpload @bind-File="_file" />
                                                </Content>
                                            </XStCard>
                                        </XStItem>
                                    </XStGrid>
                                </XStProgressCircularWrapper>
                            </XStForm>
                        }
                        else
                        {
                            <b>Not found</b>
                        }

                    </XStSkeletonWrapper>

                </Content>
                <Actions>
                    @if (_product != null)
                    {
                        <XStPrimaryButton OnClick="OnSave"
                                          Disabled="_isLoading || _isSaving">
                            Save changes
                        </XStPrimaryButton>
                    }
                </Actions>
            </XStCard>
        </XStItem>
    </XStGrid>
</div>

@code {

    private const long MaxFileSize = 1 * 1024 * 1024;

    [Parameter]
    public Guid Id { get; set; }

    private ProductEditViewModel? _product;
    private bool _isLoading = true;
    private bool _isSaving;

    // For upload files
    private IBrowserFile? _file;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var product = await ProductService.GetProduct(Id);
            _product = product != null ? new ProductEditViewModel(product) : null;

            await SetIsLoading(false);
        }
    }

    private async Task SetIsLoading(bool value)
    {
        if (_isLoading != value)
        {
            _isLoading = value;
            StateHasChanged();
            await Task.Delay(1);
        }
    }

    private async Task SetIsSaving(bool value)
    {
        if (_isSaving != value)
        {
            _isSaving = value;
            StateHasChanged();
            await Task.Delay(1);
        }
    }
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task OnSave()
    {
        if (_product is null)
        {
            return;
        }

        try
        {
            await SetIsSaving(true);

            // To read the contents of a file
            using (var memoryStream = new MemoryStream())
            {
                ProductContentModel? newContent = null;
                if (_file != null)
                {
                    // If _file exists, its contents are copied to memoryStream
                    await _file!.OpenReadStream(MaxFileSize).CopyToAsync(memoryStream);

                    // Saving information about file contents in a database
                    var contentInfo = await ContentService.SaveFileToDatabase(_file.ContentType, _file.Name, memoryStream, CancellationToken.None);

                    // A new ProductContentModel instance is created based on contentInfo and other data
                    newContent = new ProductContentModel
                        {
                            Id = Guid.NewGuid(),
                            ContentId = contentInfo.Id,
                            Name = contentInfo.Name,
                            ContentType = contentInfo.ContentType,
                            ProductId = _product.Id,
                        };

                    _file = null;
                }

                // List of old content to delete in further steps
                var oldContents = _product.Contents.ToList();

                try
                {
                    if (newContent != null)
                    {
                        // The current product content list is cleared and new content is added.
                        _product.Contents.Clear();
                        _product.Contents.Add(newContent);
                    }

                    var productModel = _product.ToModel();

                    // Updating the product model in the database based on productModel.
                    await ProductService.Update(productModel);
                }
                catch
                {
                    if (newContent != null)
                    {
                        await ContentService.Delete(newContent.Id);
                    }

                    _product.Contents.Clear();

                    // The Contents are restored from oldContents.
                    _product.Contents.AddRange(oldContents);

                    throw;
                }

            }

            NotificationService.ShowSuccess("Updated");
        }
        catch (IOException)
        {
            NotificationService.ShowError($"Max file size is {MaxFileSize}");
        }
        catch
        {
            NotificationService.ShowError("Error");
        }
        finally
        {
            await SetIsSaving(false);
        }
    }

    private void DeleteImage(Guid id)
    {
        try
        {
            if (_product == null) return;

            var content = _product.Contents.First(i => i.Id == id);
            _product.Contents.Remove(content);
        }
        catch (Exception e)
        {
            NotificationService.ShowError("Error");
            Console.WriteLine(e);
        }
    }

    internal class ProductEditViewModel
    {
        internal Guid Id { get; init; }
        internal Guid ProductTypeId { get; set; }
        internal string Name { get; set; }
        internal string Company { get; set; }
        internal double Price { get; set; }
        internal List<ProductContentModel> Contents { get; private set; }

        public ProductEditViewModel(ProductModel model)
        {
            Id = model.Id;
            ProductTypeId = model.ProductTypeId;
            Name = model.Name;
            Company = model.Company;
            Price = model.Price;
            Contents = model.Contents.ToList();
        }

        public ProductModel ToModel()
        {
            return new ProductModel
                {
                    Id = Id,
                    ProductTypeId = ProductTypeId,
                    Name = Name,
                    Company = Company,
                    Price = Price,
                    Contents = Contents.ToList(),
                };
        }
    }
}
