@using MobileStore.Core.Abstractions.Services
@using MobileStore.Core.Models
@using MobileStore.Presentation.Blazor.Components.Standard.Button
@using MobileStore.Presentation.Blazor.Components.Standard.Card
@using MobileStore.Presentation.Blazor.Components.Standard.Form
@using MobileStore.Presentation.Blazor.Components.Standard.Grid
@using MobileStore.Presentation.Blazor.Components.Standard.Progress
@using MobileStore.Presentation.Blazor.Components.Standard.Skeleton
@using MobileStore.Presentation.Blazor.Services

@page "/Admin/Products/{Id:guid}"
@attribute [Authorize]

@inject IProductService ProductService
@inject NotificationService NotificationService

<PageTitle>Product Profile</PageTitle>

<div>
    <XStGrid>
        <XStItem xs="12">
            <XStCard>
                <Content>
                    <XStSkeletonWrapper IsLoading="_isLoading"
                                        Height="300px"
                                        SkeletonType="SkeletonType.Rectangle">
                        @if (_product != null)
                        {
                            <XStForm Model="_product">
                                <XStProgressCircularWrapper IsLoading="_isSaving">
                                    <XStGrid>
                                        <XStItem xs="12">
                                            @* <MudImage Scr="@Product.Contents.Take(1)" Elevation="25" />
                                        *@
                                            <XStTextField @bind-Value="@_product.Name"
                                                          For="@(() => @_product.Name)"
                                                          Immediate="true"
                                                          Required="true"
                                                          RequiredError="Name is required!"
                                                          Label="Name"
                                                          Placeholder="Name"
                                                          Disabled="_isSaving" />

                                            <XStTextField @bind-Value="@_product.Price"
                                                          For="@(() => @_product.Price)"
                                                          Immediate="true"
                                                          Required="true"
                                                          RequiredError="Price is required!"
                                                          Label="Price"
                                                          Placeholder="Price"
                                                          Disabled="_isSaving" />
                                        </XStItem>
                                    </XStGrid>
                                </XStProgressCircularWrapper>
                            </XStForm>
                        }
                        else
                        {
                            <b>Not found</b>
                        }

                    </XStSkeletonWrapper>

                </Content>
                <Actions>
                    @if (_product != null)
                    {
                        <XStPrimaryButton OnClick="OnSave"
                                          Disabled="_isLoading || _isSaving">
                            Save changes
                        </XStPrimaryButton>
                    }
                </Actions>
            </XStCard>
        </XStItem>
    </XStGrid>
</div>

@code {

    [Parameter]
    public Guid Id { get; set; }
    
    private ProductEditViewModel? _product;
    private bool _isLoading = true;
    private bool _isSaving;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var product = await ProductService.GetProduct(Id);
            _product = product != null ? new ProductEditViewModel(product) : null;

            await SetIsLoading(false);
        }
    }

    private async Task SetIsLoading(bool value)
    {
        if (_isLoading != value)
        {
            _isLoading = value;
            StateHasChanged();
            await Task.Delay(1);
        }
    }

    private async Task SetIsSaving(bool value)
    {
        if (_isSaving != value)
        {
            _isSaving = value;
            StateHasChanged();
            await Task.Delay(1);
        }
    }

    private async Task OnSave()
    {
        if (_product is null)
        {
            return;
        }

        try
        {
            await SetIsSaving(true);

            await ProductService.Update(_product.ToModel());

            NotificationService.ShowSuccess("Updated");
        }
        catch
        {
            NotificationService.ShowError("Error");
        }
        finally
        {
            await SetIsSaving(false);
        }

    }

    private class ProductEditViewModel
    {
        public Guid Id { get; init; }
        public Guid ProductTypeId { get; set; }
        public string Name { get; set; }
        public string Company { get; set; }
        public double Price { get; set; }

        public ProductEditViewModel(ProductModel model)
        {
            Id = model.Id;
            ProductTypeId = model.ProductTypeId;
            Name = model.Name;
            Company = model.Company;
            Price = model.Price;
        }

        public ProductModel ToModel()
        {
            return new ProductModel
                {
                    Id = Id,
                    ProductTypeId = ProductTypeId,
                    Name = Name,
                    Company = Company,
                    Price = Price,
                };
        }
    }
}
