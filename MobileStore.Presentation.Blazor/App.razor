@using MobileStore.Presentation.Blazor.Layouts
@using MobileStore.Common.Abstractions.Services

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWriteIdentityService WriteIdentityService

@* Router добавляет возможность маршрутизации по вложенным компонентам *@
@* атрибут AppAssembly указывает на сборку, в которой следует искать запрошенные вложенные компоненты *@

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <h1>Sorry</h1>
                    <p>You're not authorized to reach this page.</p>
                    <p>You may need to log in as a different user.</p>
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>

        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            WriteIdentityService.SetCurrent(user);
        }
        else
        {
            WriteIdentityService.ClearCurrent();
        }
    }
}
